import { assertEquals } from "@std/assert";

type strArr = Array<string>;
type coordinate = {x: number, y: number};
type spot = {coordinate: coordinate, character: string}
type region = {character: string, coordinates: Set<string>, perimeter: number, price: number}

const testData: strArr = [
    'OOOOO',
    'OXOXO',
    'OOOOO',
    'OXOXO',
    'OOOOO',
]

const fullData: strArr = [
    'CCCCCCCCCCKKKKKKKKDKQQQQQQQQFFRFFFFEEEEEEEEEEEEEEEEUUUUUUUBBBBBBBBBBBBBBBBBXXXXXXXXXTTNTTTTTTTTTTTTTTTTTTTTTTXXXXXXXRRRRRRRRRRRRRRRRRRMYYYYY',
    'CCCCCCCCCKKKKKKKKDDKKQQQQQQQFFFFFFEEEEEEEEEEEEEEEEEUEUUUUUJBBBBBBBBBBBBBBBBBXXXXXXXXTTTTTTTTTTTTTTTTTTTTTTTTTXXXXXXXRXRRRRRRRRRRRRRRRPYYYYYY',
    'CCCCCCCCKKKKKKKKKKKKKQQQQQQFFFFFFFFFFEEEEEEEEEEEEEEEUUUUUUUBBBBBBBBBBBBBBBBBXXXXXDXXXXXTTTTNNNNTTTTTTTTTTTTYYTXXXXXXXXRRRRRRRRRRRRRRRYYYYYYY',
    'CCCCXXXKKKKKKKKKKKKKKQQQQQQFFFFFFFFFFEEEEEEEEEYYYEEEEUUUCUUMBBBBBBBBBBBBBBBBXXXXXDXXXXXTTTCCNNNNNTTTTTTTTTTTTTXXXXXXXRRRRRRRRRRRRRRRRSYYYYYY',
    'CCXXXXXXHKKKKKKKKKKKKKKQQFFFFFFFFFFFFFFEEEEEEEYYYEEEEEEMMMMMBBBBBBBBBBBBBBBXXXXXDDDXXXXTTCCNNNNNTTTTTTTTTTTTXTXXXXXXXRRRRRRRQRRRRRRRKYYYYYYY',
    'CCXXXXXXHKKKKKKKKKKKKKQQQFFFFFFFFFFFFFFEEEEEEEYYYYYYEEEMMMMMMMMBMMBBBBBBBBXXXXXXDDEDDXXTTNNNNNNNTTTTTTTTTTTTXXXXXXXXRRRRRRRRRRRRRRRRKYYYYYYY',
    'XXXXXXXXXKKKKKKKKKKKKKFFFFFFFFFFFFFFFFFFEEEEEEEYYYYYYEEEMMMMMMMMMMBBBGZBBXXXXXXDDDDDDDDTTTNNNNNNTTTTTTTTTVTXXXXXXXXXXRRXXRRRRSSRRRSRKKYYYYYY',
    'TXXXXXXXBKKKKKKKKKKKKDDDFFFFFFFFFFFFFFFFEEKKEEYYYYYYYYYMMMMMMMMMMMBBBZZZQZXXXDDDDDDDDDDTTTNXNNNNNTTTTTTTTVXXXXXXXXXXXXXXXRRSRSRRSRSSYYYYYYYY',
    'XXXXXXXXXKKKKKKKKKKKKKDDDFFFAFFFFFFFFFFFKKMKKEYYYYYYYYMMMMLLLLMMMBBBBCZZZZZZZDDDDDDDDDDTTTNNNNNNNTTTTTTTTVVVXXXXXXXXXXXXRRSSSSRSSGSSSSYYYYYY',
    'GXXXXXXXXKKKKKKKKKKKKKKDFFFAAAAFFFFFFFKKKKKKKYYYYYYYYYMMMMLLLLMMMBBBCCZZZZZZZDDDDDDDDDDQQQQQQQNQQTTLTTVVVVXXXXXXXXXXXXXRRRRSSSSSGGSSSSYYYYYY',
    'GXXXXXXXGGKKKRKKKKKKKKKKEBBAAAAAFFFFFKKKKKKKKKYYYYYYYYMMMMLLLLMMMMBZZZZZZZZZZDDDDDDDDDDQQQQQQQQQQQQQVVVVVCCCKCCXXXXXXXXRRRRSSSSSSGGGSSYYYYYY',
    'GXXXPXXXGGGKRRRRKKKKKKKBBBAAAAAAYAAFFKKKKKKKKKKKYYYYYYMLMMLLLLMMMMNZZZZZZZZZZDHHDDDDDDDPPPQQQQQQQQQQQQQVVVCCCCCCXXXXXXXEPRSSSSSSSSGGSSSYYYYY',
    'GGXXXGGGGGHKPRRRRRRJKBBBBBAAAAAAAAAAXKJKKKKKKYYYYYYYYYYMMMLLLLMLLLLLLLLLLZZZZZHHHDDDDYYYPPQPPPQQQQQQQQVVVVVVCCCXXXXXXEEEEEESSSSGGGGGGGSYYYPP',
    'GGGGGGGGGGGBGGRRRRRBBBBBBBAAAAAAAAAAAAJKKKKKKKYYYYBBBYYMMMLLLLMLLLLLLLLLLZZZHHHHHHDDYYYYYPPPPPPQQQQQQQQVVVVVVCXXXXXXEEEEEESSSGGGGGGGGGGPPPPP',
    'GGGGGGGGGGGBGRRRRRRRBBBBBBAAAAAAAAAAAAYKKKKBBBBBBBBBOYMMMMLLLLMLLLLLLLLLLLLZHHHHHHPYYYPPPPPPPPPQQQQQQQQVVVVVCCCXXXEEEEEEEEEGGGGGGGGGGGGGPPPP',
    'GGGGGGGGGGGGGGRRRRRRBBBBBBWAAAAAAAAAAAYYKKBBBBBBBBBBBBMLLLLLLLELLLLLLLLLLLLZZHHHHHPPPPPPPPPPPPPPQQQQQQQQQVVVVGGGXXXEEEEEEEEEEOGGGGGGGGGPPPPP',
    'GGGGGGGGGGGGRRRRRRRBBBBBBAAAAAAAAAAAAAAYKKBBBBBBBBBBBBBLLLLLLLLLLLLLLLLLLLLZZHHHHHHPPPPPPPPPPPPAQQQQVVVVVVVVGGGOXGIEEEEEEEEEEEEGGKGGGGOOPPPP',
    'GGGGGGGGGGGGRRRRRRBBBBBBBBAAAAAAAAAAAAYYKYBBBBBBBBBBBBBLLLLLLLLLLLLLLLLLLLLZZHHHHHHPPPPPPPPPAAAAQQQVVVVVVVVGGGGGGGEEEEEEEEEEEEEGKKGGGGOOPPPP',
    'GGGGGGGGGGGRRRRRRRBBBBBBAAAAAAAAAAAAAAYYYYYBBBBBBBBBBBBLLLLLLLLLLLLLLLLLLZZZHHLLHPHPPZPPPPPAAAAAQVVVVVVVVVVVGGGGGGEEEEEEEEEEEEEGVKGGGGOGPPPP',
    'GGGGGGGGGZRRRRRRRBBBBBBBBBBBBAAAAAAAAAYYYYYBBBBBBBBBBBBLLLLLLLLLLLLLLLLLLZZHHLLLHPPPPZVVXPPAAAAQQVVVVVVVVVGGGGGGGGGEEEEEEEVVEEEVVVGGGGGGPPCC',
    'GGGGGGGGGZRRRRRRRBBBBBBBBBBBBAAAAAAHAAAAYYBBBBBBBBBBBBBBLLLLLLLLLLLLLLLLLJHHHLLLLLPPPVPVVVVAAAAQVVVVVVVVVVGGGGGGGGGEEEEEEEEVVVVVVVGCCCGCCCCC',
    'GGGGGGGGGZRRRRRRBNBBBBBBBBBBBAAAAAAHIAAYYYBBBBBBBBBBBBAALLLLLLLLLLLLLLLLLJJJLLLLLLLNNVVVVVVAVVVQAAVVVVVVVVGGGGGGGGGVVVVVVVVVVVVVVVGCCCCCCCCC',
    'GGGGZGGZGZZRRRRRBBBBBBIIIBBIIIIIIIIIIYYYBBBBBBBBBBBBBBABLLLLLLLLLDDZZDDJJJJJLLLLLLLNNVVVVVSVVVBBVAVVVVVVVGGGGGGGGGVVVVVVVVVVVVVVVVVVCCCCCCCC',
    'GGGGZZZZZZZRRRRZZBHBBBBBIBIIIIIIIIIIIIYYYYHHBBBBBBBBBBBBLLLLLLLLLDDDDDDDDDDDLLLLLLLLLQVVVVVVVVVVVVVVVVVVVVGGGGGGGGGGVVVVVVVVVVVVVVVVVCCCCCCC',
    'QQZZZQZZZZZZZZZZZBBBBBBIIIIIIIIIIIIIIYRRRRRRRRRRBMBBBIBBLLLLLLLLLDDTTDDDDDDDLLLLLLOOLVVVVVVVVVVRRRVVVVVVVVGGGGGOGOOGGGGVVVVVVVVVVVVVVCCCCCCC',
    'QQQQQQZZZZZZZSZZZBBBBBBIQIIIIIIIIIIIIYRRRRRRRRRRMMGGGAAALLLLLLLLLTTTTTDDTDDDDLLLLLOOOOVVVVVVVVENNNUUUVVVVVGGJGGOOOOGGGGGGBBBVVVVVVVVVCCCCHCC',
    'QQQQQQQZZZZZZSZZZBBBBBBDIIIIIIIIIIIIIIRRRRRRRRRRGMGGGAAAAAAAAAAATTTTTTTTTTTDDDLLLLLLOVVVLLVVVEENNNUUVVVVVJKGJJGOOOOOGGGGBBBBVVVVVVVVVVCHHHHH',
    'QQQQQQQQZQZZSSZZZZBZBZBDIIIIIIIIIIIIIIRRRRRRRRRRGGGGAAAAAAAAAAAATTTTTTTTTTDDDLLLLLLLLVVVLLVVWWNNNNNWWFFVJJJJJJGOOOWOOGGGBBBBVVVVVVVVVVCHHHHH',
    'QQQQQQQQQQZZSSZZZZZZZZSDDIIIIIIIIIIIIIRRRRRRRRRRGGGGGAGAAAAAAAAATTTTTTTTTTDDDLLLLLLLLLLLLWWWWWWWNNNNWWWJJJJJJJHHJOOOSWGGBBBBBBBVVVVVVVVHHHHH',
    'QQQQQQQQQQZZSSSSSSSSSSSIIIIIIIIIIIIIIIRRRRRRRRRRKKKKKGGAAHAAAAAATTTTTTTTTTDDDLDHHLOLLLLLLWWWWWWWWWWWWWWHJJJJJJJJJJJJSWGWBBBBBBBBBVVLVVVHHHHH',
    'QQQQQQQQQQQZSSSSSSSSSSSKKBIIIIIIIIIIIIRRRRRRRRRRKKKKKGGAGAAAAGAGTTTTTTTTTTDDDDDHHHOLLLLLLLWWWWWWWWWWWWWWWJJJJJJJJWWWWWWWWBBBBBBBBBLLVKVHHHHH',
    'QQQQQQQQQQQZSSSSSSSSSSSKKBBIKIKKKIIIIIRRRRRRRRRRKKKKKGGGGGGGGGGGTTTTTTTTTTDDDDDDHHOLLLLLLLWWWWWWWWWWWWWWWFJJJJJJJJWWWWWWWWWBBBBBBBLLVRRHHHHH',
    'QQQQQQQQQQQQSSSSSSSSSSSKKKBKKKKKKKFIFFRRRRRRRRRRKKKKKGGGGGGGGGGGIITTTTTTTTDDDDDDDDOOOLOOLLWWWWWWWWWWWWWWWFJJJJJJJWJWWWWWWWWBBBBBBBLLVRRHHHHH',
    'QQQQQQQQQQQQQQRSSSSSSSSKKKKKKKKKKKFFFFRRRRRRRRRRRKKKKGGGGGGGGGGGIIITTTTTTDDDDXXDOOOOPOOLLLLWWWWWWWWWWWWWFFFFFFJJWWWWWWWWWWWWWBBBBBRRRRRHHHHH',
    'QQQQQQQQQQQQQUSSSSSSSSSKKKKKKKBFFFFFFFFFRKRRRRRRRKKKKGGGGGGGGGGGGGGGGGTTGGDDDCCOOOOOOOOOOLLLWWWWWWWFWWWWWFFFFFFJJCWWOWWWWWWWWBBBBBRRRRRRRHHH',
    'QQQQQQQQQQQQQUUSSSSSSSSKKKKKKKKKKFFFFFFFRKRRRRRRRKKKKGRRRGGGGGGGGGGGGGGGGGGDCCCCOOOOOOLLLLLLLWWWWWWWWWWWFFFFFFFCCCWWWWWWWWWWWBBBBRRRRRRRRHHH',
    'OQQQEQNQQQQQQUDDSSSSSSSIKKKKKKKKKFFFFFFFNKRRRRRRRKKKKGRRRRRRGGGGGGGGGGGGGGGDDCCOOOOOOOLPPPLPLWWWWWWWWWWWWFFJJFWWWWGWWWWWWWTWRRBRRRRRRRRRHHHH',
    'OEEQEEQQQQQQQUUDSWSSSIIIKKKKKKKFFFFFFFNNNKRRRRRRRKGGGGGRRRRRRGGRGGGGGGGGGGICCCOOOOOOOOOPPPPPPWWWWWWWWWWWFFFJJFWWWGGGWWWWWWWRRRRUURRRMRFRRHHR',
    'EEEEEEQQQQQQQUDDDDDDDIKKKIKKKKKFFFFFFNNNNKRRRRRRRKGGGGGRDDRRRRGRRRGGGGGGGGGCCCOOOOOOOOPPPPPPPPWPPPWWWWWWWJJJWWWWWGGGWWWLWWUUUUUURRRMMRRRORRR',
    'EEEEEEEQOQEEQQDDDDDDIIIKKIIIIKKKFFFFFNNNNNNNHSSSSGGGDDDDDJRRRRGGRGGGGGGGGGGGCCPCCOOOOPPPPPPPPPPPPRWWWWWWJJJWWWWWWGGGOWWLWOUUUUUUUUUMMRRRRRRR',
    'IIEEEEEEEEEQDDDDDDHIIIKKIIIIIIKKYFFFFNWWNNHNHSSSSSGGDDDDDDDRRRGRRGGGGGGGGGGMCCCCCOOUUUPPPPPPPPPPPRWWMWJWJJJWWWWWWGGOOOOOOOOOUUUUUUUUURRRRRRR',
    'IIEEEEEEEEEQDDDDDDHHHIIKIIIIIIIWWFFWWNWRHNHHHSSSSSGGGADDDDDDRRRRRRGGGGGGGRGGCCCCCCUUUPPPPPPPPPPPPPRWMMJJJWWWWWWWWWOOOOOOOOOOOUUUUUUUURRRRRRR',
    'IIEEEEEEEEEDDDDDDDDHHIIIIIIIIIIWWFFWWWWWHHHHHHHSSSSSDDDDDDRRRRRRRRGGGGGGGRCCCCCCCCCCPPPPPPPPPPPPPEMWMJJLWWWWWWWRWOOOOOOOOOOOUUUUUUUUURRRRRRR',
    'IXXGEEEEEEEXDDDDDDDHHIIIIIIIIIIIWWFWWWWKHHHHHHHHSSSDDDDDDDDDDDRRGGGGOGGGGCCCCCCCCCCPPPPPPPPPPPPPPPMMMJJLMMWWWBBEEOOOOOOOOOOOUUUUUUUURRRRRRRR',
    'IXXXEEEEEEEXDDXXDDDHHQQIIQQQOOOOOOFWWWWHHHHHHHHHSDDDDDDDDDDDDDRRGGGGGEEECCCNCCCCCCCCPPPPPPPPPPBPPMMMMMJLLLLWRRBEEEEEOOMOOOOOUUUUUUUUURRRRRRR',
    'IXXXXEEEEEEXXDXXXUDDQQIIQQQQOOOOOOWWWWWHHHHHHHHXDDDDDDDDDDDDDDRRRGGGGEEEECCCCCCCCCCCPPPPPPPPPPBPPMMMGGLLLLLRRREEEEEEEOOOOOOUUUUUUUUURRRRRRRR',
    'IXXXXEEEXXXXXXXXUUDQQQIIQQQQOOOOOOWWWWWHHHHHHHHDDDDDDDDDDDDDDDREGGGGEEEEEECCCCTCCCCCCCCCCPPFPWMMMMMMGGGLLLLREEEEEEEOOOOOOOOUUUUUUUUURRRRRRRR',
    'IIXXXXXEEXXXXXUUUUQQQQQQQQQQQQQQXHTWWWHHHHHHHHDDDDDDDDDDDDDDDRREIEEEEEEENEETTTTCCCCCCCCCPPPCWWMMMMMMMLLLLLMMEEEEEEEOOOOOHOOUUUUUUUURRRRRRRRR',
    'IIIXXXXXEXXXXXUUXXXQQQQQQQQQQQQXXHTWWWHHHHHHHHHDDDDDDDDDDDDDRRREEEEEEEEENNETTTTCCCCCCCCCCCPCCCMMMMMMMMLMLMQMEEEEEEEHOHOHHHOUUUUUUUURRRRRRRRR',
    'IKIKKKXXXXXXXXUUUXUUQQQQQQQQQQQHHHWWHWWHHHHHQQKDDDDDDDDDDTTTEEEEEEEEEEENNNNNNTTTTCCCCCCCCCCCCCZMMMMMMMMMLMMMEEHEEEHHHHHHHOOOUHUHUUURRRRRRRRR',
    'IKKKKXXXXXXXXXXUUUUUQQQQQQQQQQHHHHHHHHHHHVQQQQQNDDDDDDDDDDTTEEEEEEEEEEENNNNNTTTTTTTCCCCCCCCCCCCCMMMMMMMMMMMMEERRRERHHHHHHHHHHHUHUUUUUURRRRRR',
    'IKXXXXXXXXXXXXXUUUUUQQQQQQQQQQQHHHHHHHHHHQQQQQQDDDDDDDDDDDTTEEEEEEEEEEENNNNNFTTTTTTTKKCCKCCCCCCCZMMMMMMMMMRRERRRRWRHHHHHHHHHHHUHHUUUUURRRRRR',
    'IXXXXXXXXXXXXXXUUJQQQQQQQQQZZQHHHHHHHHHHJJJJJQQQDDDDDYDTTTTTEEELLLEEEEENNNNTTTTTTTKKKKKCKKCCCCCCZMMMMMMMMRRRRRRRRRRRHHHHHHHHHHHHHUURRRRRRRRR',
    'XXXXXXXXXVVXXXVVJJQQQZZQQZQZZHHHHHHHHHHHHJJJJQQQQQQDDDYYYYYTFEELLLEEEENNNNNNNTTTKPKKKKKKKKCCCCZZZMUMMMMMMRRRRRRRRRRRHHHHHHHHHHHHHHHRRRRRRARR',
    'XXXXXXXXXVVVVVVVJJJJJZZZZZZZHHHHHHHHHHHHHHQQQQQQQQQQQYYYYTTTUUUUULLLNNNNNNNTTTTKKKKKKKKKKKKCCCZZZZUMMMMMMRRRRRRRRRRRHHHHHHHHHHHHHRRRRRRAAAAA',
    'XXXXXXXXXVVVVJVVJJJJJJJJZZZZHHHHHHHHHHHHHKKJQQKKQQQYYYYLYTTJJUUUUUULLLNNNNNNNTTKKKKKKKKKKKKKUCUZZZUUMMMMMRRRRRRRRRUHHHHHHHHHHHHHHHHARRRAAAAA',
    'XTXXXXXVVVVVVJJJJJJJAJJJZJJZZHHHHHHHHHHLLKKKKKKKKQQQYLLLYYUJUUUUUULLNNNNNNNNNNNKKKKKKKKKKDKEUUUUUUUUMMMMMMMRRRRRRRUHHHHHHHHHHHHXHHHAAAAAAAAA',
    'FXXQQQVVVVVVVVOJJJJJJJJJJJJJZHHHHHHHLLLLKKKKKKKKVQZLYLLLLYUUUUUUUUUNNNNNNNNNNNKKKKKKKKKKDDDUUUUUUQUSMMMMMMMMRGRRRRRQHHHHHHHHHHHXXHHAAAAAAAAA',
    'FFXFQQQVVVVOOOOOOJJJJJJJJJJJHHHHHHHHLLKKKKKKKKKKVQZLLLLLLYUUUUUUUUUNNNNNNNNNNNNKKKKKKKKKUUUUUUUUUUUUMMMMMMMMMRRRQQQQHHHHHHHHHHXXXXHASAAAAAAA',
    'FFFFFFFFVVVOOOOIOJJJJJJJJJJJJHHHHHHHLKKKKKKKKKKVVLLLLLLLLLLUUUUUUUUUBBBNNNNNNNKKKKKKKKKKKKUUUUUUUUUUTTMMMMMMMMRRRRQHHHHHHHHXXXXXXXHHAAAAAAAA',
    'FFFFFFOOOYVOOOOJJJJJJJJJJJJJJHHHHLLLLKKKKKKKKKKVVLLLLLLLLLLUUUUUUBBUBNNNNNNNNWWWKKKXKKKKQQQUUUUUUUUUUMMMMMMMMRRRRRQQQHHHQQQXXXXXXXHNXXAAAAAA',
    'FFFFFFOOOOOOOOYJJJJJJJJJJJJJJJLHLLLLLLKKKKKKKKKVVVLLLLLLLLLLLUUUUQQQBBBNNNNNNWWWWKKKKKXXXXXXXXXXUULLLLMMMQQQQQQQQQQQQQQQQQQXXXXXXXXNXXAAAAAA',
    'FFFFFFFFOOOOJJJJJJJJJJJJJJJJJJLLLLLLKLLKKKKKKKVVVVLLLLLLLLLLLLUUUQQQQQBBBBBQQWWWWWKLLLXXXXXXXXXXUULLLLLMHHQEQQQQQQQQQQQQQQQQXQXXXXXXXXAAAAAA',
    'FFFFFFOOOOOOJJJOJJJJJJJJJJJJLLLLLLLKKKKKKKKKKKVVVWEELLLLLLLLLLQQQQQQQGQBBBQQQWWLWLALLLXXXXXXXXXXUULELLEHHQQQQQQQQQQQQQQQQQQQQQXXXXXXXXXAAAAA',
    'FFFFFFOOOOOOOOOOOJOJJJJJJJJJJJLLLLLLLLKKKKKKKLLLLWWWLLLLLLLLLLLQIIQQQQQQQQQQQWWLLLLLLLXXXXXXXXXXXXXXXXXXXHHHHHHHHHQQQQQQQQQQQQXXXXXXXXXXXAAA',
    'FFFFFFBBOOOOOOOOOOOJJJJJJJJLJLLLLLLLLLLLKKKKKLLLEWWWEEEELLLLLLLLIQQQQQQQQQQLJLLLLLLLLLXXXXXXXXXXXXXXXXXXXHHHHHHHHHUQQQQQQQQXQQXXXXXXXXXAAAAA',
    'FFBBBBBBBOOOOOOOOOOOJJJOJJJJJNNNNNLLLLLLKKKKKLLDEEEEEEELLLLLLLJJQQQQQQQQQQQLLLLLLLLLLLXXXXXXXXXXXXXXXXXXXHHHHHHHHHQQQQQQQQQXXMXXXXXXXXXAAAAA',
    'FFBBBBBBBBOOOOOOOOOOOOOOOJJNNNNNNNLLLLLLLLLLLLLDDEEEEXXLLLLXXXXXXQQQQQQQQQQLLLLLLLLLLLXXXXXXXXXXXXXXXXXXXHHHHHHHHHUQQQQQQXXXXXXXXXXXXXAAAAAA',
    'FFBBBBBBBBOOOOOOOOOOOONNONJJNNNNNNLLLLLLLLLLLDDDEEEEEXXLLXXXXXXXXXXQQQQQQQQLLLLLLLLLXXXXXXXXXUUXXXXXXXXXXHQHHHHHHHQQQQQQQXXXXXXXXXXXXXAAAAAA',
    'FBBBBBBBBBOMMOOOOOOOONNNNNNNNNNNNNNLLLLYYLLLLDDDEEXEXXXXLLLXXXXXXXQQQQQQQQQLHLLLLLLLXXXXXXXXXUUXXXXXXXXXXQQHHUUUUUGGGGGQQXXXXXXXXXXXXXXXSAAA',
    'BBBBBBBBBBBMMMOOOOOOONNNNNNNNNNNNLLLLLLYYLLLLDDDDXXXXXXXLLXXXXXNNQQQQQQQQGGGGLLLLLLLXXXXXXXXXUUXXXXXXXXXXHHHHHUUUUUGGMGGGGXXXXXXXXXSSSSSSSAA',
    'BBBBBBBBBBMMMMMMMOOOOONNNNNNNNNNNNLLLLLLYYLLLLLDDXXXXXXXLXXXXXNNNNNNNQQGGGGGGGLLLLLRXXXXXXXXXUXXXXXXXXXXXHHHHHUHUUMMMMGWGGXXAXXXSSSSSSSSSSAA',
    'BBBBBBBBBBMMMMMMMMOOOONNNNNNNNNNRNLLLYYYYYLLLDDDDDDXXXXXXXXXXXNNNNNNRQQGGGGGGGLLLLLLXXXXXXXXXUXXXXXXXXXXXHHHHHHHRUMMMGGGGGJGAAASSSSSSSSSSSAA',
    'BBBBBBBBBBMMMMMMMMEEONNNNNNNNNNNNNLLYYYYYYLLLLDDDDDXXXXXXXXXXXNNNNNNNGGGGGGGGLLXIDDDXXXXXXXXXUXXXXXXXXXXHHHHHHHHMMMMMGGGGGGGGGASSSSSSSSSSSAA',
    'BBBBBBBBBMMMMMMMEEEEOONNNNNNNNNNNNYYYYYYYLLLLQDDDDDDDXXCCCXXXXXNNYNNGGGGGGGGGGGXXXNDXXXXXXXXXSXXXXXXXXXXJHHHHHHIMMMMGGGGGGGGGAASSSSSSSSSSSAA',
    'BBBBBBBBBBKMAMMMEEEEEONNNNNNNNNNNRRYYYYYYLLDDDDDDDDDDDDCCCCXXXXNNNNNGGGGGGGGGGGGXXNNXXXXXXXXXSXXXXXXXXXXJHHHHHHHXXXXXGGGGGGGGGGSSSSSSSSSSSVA',
    'PPBBBBBBBBBAAAMMMEEEEEENNNNBBNNNNRRYYYYYYYYYDDDDDDDDDDCCCCCXXXNNNNNNNNNGGGGGGGXXXXXNXXXXXXXXXXXXXXXXXXXXNNHHHHXXXXXXXGGGGGYYGGGYSSSSSSSSSSVV',
    'PBBBBBBBBBBMMMMMEEEEEEENNBNBBGRRRRRRRYYYYYYYYDDDDDDDDDCCCCFXXXXNNNNNNFGGGGXGGXXXXXXNNNPPPXXXXXXXXXXXXXXXHHHHHHHXXXXXXGGGGGGYGYYYSSSSSSSSSVVL',
    'PPBBBBBBBEBUMMMEEEEEEBBQNBBBBBRRRRRRYYYYYYYYYDDDDDDDDDCCCCXXXXXXNNNNNXXXXXXGGGXXXXXXNPPPPXXXXXXXXJJJJJJJXHXHHHHXXXXCXGGGGCYYYYYYYSSSSSSSSVVL',
    'BPBBBBBBBEEMMMEEEEEEEBBBNBBBBBBBRRRYYYYYYYYYYYDDDDDDDDDCCCCCCCXNNHHNNHHXXXXXXXXXXXPNNPPPPXXXXXXXXJJJNNJJXXXHHHXXXCCCCCCGGCCYCYYYSSSSSSSSSSVV',
    'BBBBBBBBEEEEMEEEEEEEEXBBBBBBBBBRRRRYYYYYYYYYYYDDDDDDDDDCCCCCCCCNHHHHHHHXXXXXXXPXPPPPPPPPPXXXXXXXXJJNNNJXXXXXHXXXXCCCECCGGCCCCCYSSSSSSSSGSSSV',
    'MBBBBBBKEEEEEEEEEEEEEEBBBBBBBBBRRRRYRYYYYYYYYYXDDDDDDDDDCCCCCCCHHHHHHHXXXXXXXXPPPPPPPPPPPXXXXXXXXJJNNNNXXXXXXXXXCCCCCCCCCCCCCYYSSSSSSSSSSVVV',
    'MMMLLBKKKEEEEEEEEEEEEEEBBBBBBBBBRRRRRYYYYYYYXXDDDDDDDDDCCCCCCCCHHHHHHHHHHXXXXXPPPPPPPPPPPXXXXXXXXNNNNNNNNXXXXVVXCCCCCCCCCCCCCCCCSSSSSTSSVVVV',
    'MMMLBBKKKEEEEEEEEEEEEEMBBBJBBBBBRRRRRRRYDYYERRYDDDDDDDDCCCCCCCCHHHHHHHNNXXXXXXPWWPPPPPPPPPPPPJJJNNNNNNNNXXXXXVVXXXXXXXXCCCCCCCTTTSSLSSSVVVVV',
    'MMMMMKKEEEEEEEEEEEEEAAJBJJJJJJJJJRRRRRRRYYYRRRDDDDDDDVDCCCCCCXCHHHHHHHNXXXXXXXWWWWWPPPPPPPPJJJJJJNNNNNNNNNXXXVVXXXXXXXXCCCCCCCCLTTTLLVVVVVCC',
    'MMMMMEKEEEEEEEEEEEEEEJJJJJJJJJJJRRRRRRRRYRYYRRDDDDDDDVVCCCCCXXXHHHHHHNNXXXXXXXWWWWWWWPPPPPPPJJJJJJNNNNNNLLVVVVVXXXXXXXXCCCCCCCLLLLLLVVVVCCCC',
    'MMMMMEEEEEEIIIIIEEEEEJRJJJJJJJJJJJRRRRRRRRRRRRDYDDDDDCCCCCCCCXXHHHSHHNXXXXXXXWWWWWWWWPPPPPPPPPJJJJNNNNNNLLLVVVXXXXXXXXXCCCCCCLLLKLLLLVVCCCCC',
    'MMMMMEEEIEIIIIIIEEEEJJJJJJJJJJJJJJJRRRRRRRRRRRRYDDDODDCCCCCXXXXXXXXXXWXXXXXXWWWWWWWWWPPPPPPPYYYJJJNNLNNLLLVVVVXXXXXXXXXCCCCCLLLLLLLKLLLCCCGC',
    'MMMMMMEEIIIIIIIIEEEXXJJJJJJJJJJJJJJJRRRRRRRRRRRYYDDDCDCCCCCXXXXXXXXXXWXXXXXXWWWWWWWWWPPPPPPYYYYYYJJYLLLLLLVVVVXXXXXXXXXCCCCLLLLLLLLLFLCCCCCC',
    'MMMMMMMMIIIIIIIIXXXXXXXXJJJJJJJJJJJRRRRRRRRRRRYYYYYYCCCCCXXXXXXXXXXXXWWWWXWWWWWWWWWWWPPPPYYYYYYYYYYYLLLLLLLVVVXXXXXXXCCCCCCCLLLLLLLLCCCCCCCC',
    'MMMMMMMIIIIIIIIIIIXXXJJJJJJJJJHHJJJRRBBBBBBBBYYYYYYYCCCCCXXXXXXXXXXXWWWWWWWWMWMMMMMMMMPPYYYYYYYYYYZYLLLLLLLVVVXXXXXXXCCCCCCCCLSLLLLLLCCCCCCC',
    'MMMMMMMMIIIIIIIIIIXXXJJJJJJJCHHJJJJRRBBBBBBBBYYYYYYCCCCCXXXXXXXXXXXXXWIIIIIWMMMMMMMMMMYYYYYYYYYYYYYYLLLLLLZVVVVVVVVVVVVVCCCCSSSLLLLLCCCCCCCC',
    'MMMMMMMIIIIIIIIIIIXXICCCCCCCCHHHDRRRRBBBBBBBBYYYYYYYYCCCCCXXXXXXXXXXXDIIIQMWMMMMMMMMMMMYYYYYYYYYYYYYLZZZLZZZVVVVVVVVIVVVVCCCOOOLLLLCCCCCCCCC',
    'MMMMMMIIIIIIIIIIIIIIICCCCCCCHHHDDDRRRBBBBBBBBYYYYYYYCCCCCCCCEEXXEXEEEWWWWQMMMMMMMMMMMMEYYYYYYYYYYYLLLZZZLZZZVVVVVVVVIIVVIIQQOOOLLLCCCCCCCCCC',
    'MMMMMMMMIIIIIIIIIIIIICCZCCCQQHHDDDDDRBBBBBBBBYYYYYYYCCCCCCCEEEEXEEEEEWWWWMMMMMMMMMMMMEEEYYYYYYYYYYLLLZZZZZZYVVVVVVVVIIIIIIQOOOOOOLLCCCCCCCCC',
    'HMMMMMMMMIIIIIIIIIIIIIZZZQCQQQQDDDXERBBBBBBBBYYYYYYYCCCCCCCEEEEEEEEEEEWMMMMMMMMMMMMMMEEYYYYYYYYYYYYLLZZZZZZQVVVVVVVVIIIIIIIIOOOOOOOOCCCCCCCC',
    'MMMMMMMMIIIIIIIIIIIIIIZZZQQQQQQDEEEEEBBBBBBBBYYYYYYCCCCCCCCEEEEEEEEEWWWWMMMMMMMMMMMMMMMMYYYYYYYYYYYYLZZZZZZQPVVVVVVVBBIIIIIPOOOOOOOOCCCCCCCC',
    'FMMMMMXMIIIIWIIIIIIIIIZZZQQQQQQEEEEEEBBBBBBBBBBBBBBCCCCCCCCEEEEEEEEEEWWWWWMMMMMMMMMMMMMSYYYYYYYYWWYYUZZZQQZQQVVVVVVVBIIWWWIIOOOOOOOOCCPCCCCC',
    'FFFFMMXXXWIIWWIIIIIIIZZZQQQQQQEEEEEEEBBBBBBBBBBBBBBOOCCCCCCEEEEEEEEEFWWMMMMMMMMMMMMMZYYZSSSYYYYYYWWUUUUUUQQQQQVWWVVWWIWWWOOOOOOOOOOCCCPPPCPC',
    'FFFFWWWWWWWWWWWIIIIIZZZZZQQQQQEEEEEZZBBBBBBBBBBBBBBOOOCCCCCCEEEEEEEEFWWKMMMMMMMMMMZZZZZZZSSYYYYYYWWUUUUEQQQQXXVWWVVWWWWWWWWOOOOOOOOOOOOPPPPP',
    'FFFFFWWWWWWWWWWWIIIIZZZZQQQQZZEZZZZZZZBBBBBBBBBBBBBOOOCCCCCEEEEEEEEEEWWKKKMMMMMMZZZZZZZZZSSSYYYYWWWUUUUUQQQQQXXXWWWWWWWWWWWXOOOOFOOOOOOOOPPP',
    'FFFFFWWWWWWWWWWWIZZZZZZZZZZZZZZZZZZZZOBBBBBBBBBBBBBXOCCCCCEEEEEEEEEEKWWWKKMMMMZZZZZZZZZZZZHHWWWAAAAAAAAQQQQQRQQWWWWWWWWWWWWWOOOFFFOOOOOOOPPP',
    'FFFFFWWWWWWWWWWWPZZZZZZZZZZZZZZZZZZZPPBBBBBBBBBBBBBXXCCCCCCEEEEEEEKKKWKKKKMMMMMZZGZZZZZZZZCHWWWAAAAAAAAQQQQQQQQTTWWWWWWWWWWWOOOFFFFFFOOOOOOO',
    'FFFFWWWWWWWWWWWWWZZZZZZJZZJJZZZZZZZPPPBBBBBBBBBBBBBXXCCCCCEEEEEEEKKKKKKKKKKMWWWWWGZZZZZZZZHHWWHAAAAAAAAQQQQQQQQTTWWSWWWWWWWWLLOFFFFFUUOOOOOO',
    'GGFFFFWWWWWWWWWWWZZZZZJJJJJJZZJJJJZZPPPPPPBBBBBBBBBXXCCCCCEEJEEEEEEEKKVKKKWWWWWWWZZZZZZZZHHHHHHAAAAAAAAQQQQQQQQQTTTSWWWWWWWWLLOFFFFFUUOOOOGG',
    'GGFFFFFWWWWWWWWWWXXZZZJOJJJJJJJJJJJJQPPPPPBBBBBBBBBMXCCCCCCCEEEEEEEEVVVVVWWWWWWWZZZZAAAAAAAAAAHAAAAAAAAQQQQQQQQQTSSSWWWWWWWLLLOLFFFUUUUUGGGG',
    'GGGGFFFWWWWWWWWXWXXXXXJJJJJJYJJJJJJJPPPPPPBBBBBBBBBXXCCCVVCCEEVEEEEEVVVWWWWWWWWWWWZZAAAAAAAAAAHAAAAAAAAQQQQQQQQQQSSSWWWWWWWLLLLLFFFUUUGGGGGG',
    'GGGGFFWWWWWWWWWXXXXJJJJJJJJJJJJJJJPPPPPPPPPPCPPPMMMMXXXXXVVVEEVVEVVVVVVJJWWWWWWWWZZZAAAAAAAAAAHAAAAAAAAQQQQQQQSSSSSSWWWWWWWLLHHFFFHHGGGGGGGG',
    'GGGGGGIIIKKWWXWXXXJJJJJJJJJJJJJJJJPPPPPPPPPCCPPPMMMMXXXXVVVVVEVEEVVVVVVVVVVWWWWWQQQQAAAAAAAAAAHAAAAAAAAQQQUUUQSSSSNWWWWWWWWLHHHFFFHHHGGGGGGG',
    'GGGGBGBIKKKKKXXXJXJJJJJJJJJJJJJJJJPPPPPPPPPCCPPMMMMYYYXVVVVVVVVVEVVVVVVVVVVWWWWWQQQQAAAAAAAAAAAAAAHHHAAHHHHHHHHHSSNNWWWWWWWWWHHHHHHHHKGGGGGG',
    'GGGBBBBBBKKKKKXXJJJJJJJJJJJJJJJJJJJPPPPPPPPCCCCAMRMYYYXVVVVVVVVVVVVVVVVVVVWWWWWWQQQQAAAAAAAAAAAAHHHHHHHHHHHHHHHHNNNNNNWWWWWHWHHHHHHHKKKGGGGG',
    'GGBBBBBBBBBKKKXXJJJJJJJJJJJJJEJJJJJPPPPPPPCCCCCCRRMYYYVVVVVVVVVVVVIIDDVVVVWWWWWWWQQQAAAAAAAAAAAAHHHHHHHHHHHHHHHHNNNNNNWHHHHHHHHHHHHHKKKGGGGG',
    'GGGBBBBBBBBBBXXXXXJJJJJJJJJJJEEJJJJPPPPPPCCCCCCCXRRYYYNNNVVVVVVVVIIIDKVVVVKWWWQWWQQQQQQNNNHAAAAAHHHHHHHHHHHHHHHHNNNNNNWHHHHCCCHHHHHHKKKGGGGG',
    'GGGGBBBBBBBBBXXXXJJJJJJJJJJJJJJSJJJPPPPPPPPCCCXXXRRYYYNNNNVVVVVVIIIFKKVVVVKSQQQQQQQQQNNNNNNAAAAAHHHHHHHHHHHHHHHHNNNNNNWWHHHCCHHHHHHKKGKGGGGG',
    'GGGGGGBBBBBBBXXXXJJJJJJJJJJJJJJJPJJPPPPPPPPPCCXXXYYYYYYYYYVVVVVVGGVFKKVVVVKKKQQQQQQQQNNNNNAAAAAAHHHHHHHHHHHHHHHHNNNNNNWHHHHCCCHKHKHHKGGGGGGG',
    'GGGBBBBBBBBBBBXXXXXXJJJJJJJJJJPPPPPPPPPWWWWWXXXXYYYYYYYYYNNVVVVVVVVKKKVKKKKIKKQQQQQQQQNNAAAAAAAAAAHHHHHHHHHHHHHHNNNNNNWHHCCCCCNKKKKKKKGGGGGG',
    'DGDDBBCBBBBNNNNNXXXAAJAAAJFFFJPPPPPPPWWWWWWWXXXXYYYYYYYYYYYVVVVVVVVKKKKKKKKKKKKKQQQQQQQQAAAAAAAAAAHHHHHHHHHHHHHHYNNNNNNHHCCCCCNKKKKKKKGGGGGG',
    'DDDYYBBBBBBJJNNEEAAAAAAAAAFFUFFVPPPPPWWWWWWLWXXXXYYYYYYYYYVVVVVVVVVVVVKKKKKKKKKKQQQQQQQQAAAANNNNNNHHHHHHHHHHHHHHYNNNNHHHHKCCCCCKKKKKKKGGGGGG',
    'DDDDYYYBBDBJJJEEPPAAAAFAAAFFFFFVVVPPPQWWWWWWWXYYYYYYYYYYYZVVVVVVVVVVKKKKKKKKKKKKQQQQQAAQAANNNNNNNNHHHHHHHHHHHHHHYNNNNNKKHKKCCCKKKKKKKKLLGGGG',
    'DDDDYYYDDDDDDDEEEEEAAAFFFFFFFFFFFVVPVWWWWWFWXXXYYYRYYYYNNVVVVVVVVVVVVKKKKKKKKKKKKQQQQAAAAANNNNNNNNHHHHHHHHHHHHHHYKNNNKKKKKKKCCKKKLLLLLLLLLGG',
    'DDDDDDYDDDZDDDEEEEEIIFFFFFFFFFFFFVVPVVWWWWWHXXXXYYUYYNNNNVVVVVVVVVVVVVKKKKKKKKKKKKQQQAAAAANNNNNNNNHHHHHHHHHHHHHHKKNKKKKKKKKMKKKKKLLLLLLLLLLL',
    'DDDDDDDDDDDDDEEEEEEIIFFFFFFFFFFFFVVVVWWWWWWXXXXXPPUUNNNNVVVVVVVVVVVVVVVKKKKKKKKKKKKKAAAAANNNNNNNNNHHHHTHHHHHHHHHKKKKKKKKKKKKVKKKLLLLLLLLLLLL',
    'DDDDDDDDDDDDDEEEEEEEEFFFFFFFFFFFFVVVVWWWWWAAAXAUUUUUNNNNNNVVVVVVVVVVVVKKKKKKKKKKKKKAAAAAAANNNNNNNNHHHHTHHHHYYYYYKKKKKKKKKKKKKKKKKKLLLLLLLLLL',
    'DDDDDDDDDDDDEEEEEEOOVFFFFFFFFFFFFFVVVVWVWWAAAAAUUUUUNNNNNNVVVVVVVVVVKKKKKKKWWKKKKKKKKAAAAANNNNNNNRHHHHTTTTTTYYYYKKKKKKKKKKKKKKKGKKKLLLLLLLLL',
    'DDDDDDDDODOOEEEEEEOOOFWFFFFFFFFFFFVVVVVVWWAAAAUUUUUUNNNNNNLVVVVVVVVKKKKKKKWWWKKKKKAAAAAAAAAANNNNRRTTTTTTTTTYYYYYKYYKKKKKKKKKKKKKKKLLLLLLLLLL',
    'DDDDDDOOOOOOEEEEEEOOOOFFFFFFFFFFVVVVVVLLOOLAAAUUUUDGNNNNNNNNVVVVVWRKKKKWWWWWWWWXXXAAAAAAAAAANNNNRRTTTTTTTTTYYYYYYYYYSSKKKKKKKKKKVLLLLLLLLLLL',
    'DDDDOOOOOOOOEEEEEEOOOOFFFFFFFFFFVVVVVVLLLLLAAAAUQGGGNNNNNNNCCVTIVWRRKWKWWUWWWXXXXXAAAAAAAAAAUNNNNRTTTTTTTTTTYYYYYYYYSSKKKKKKKKKKLLLLLLLLLLLL',
    'DDDDDDODOOOOOOEEEOOOOOFFFFFFFFFVVNNVVLLLLLLLAAAUGGGVVJJJANCCVVVIIWWWWWWWWWWWXXXXXXAEZZZZZWNNNNNNNRRRTTTTTTTYYYYYYYYYYSSKKKKKKKKKKLLLLLLLLLLL',
    'DDDDDDDDOOOOOOEOEOOOOOFFFFFFFFFNNNNVLLLLLLLLLGGGGGGVGJJJJJJCVVIIWWWWWWWWWWWWXHHHUUUZZZZZZZUURNNNRRRRTTRTTRYYYYYYYYYYSSSSSSKKKKKKPPPLLLLLLLLL',
    'DDDDVDDDOOOOOOOOOOOOOOOFFFFFFFNNNNGLLLLLLLLLLGGGGGGGGJJJJJJJVVIIWWWWWWWWWWHHHHHHHUUUUZZZZUUURRNRRRRRRRRRRRYYYYYYYYYYSSSSSSKKKKKKPPPPLLLLLLLL',
    'DVVDVDDDOOOOOOOOOOOOOOOFFFFFNNNNNNGGLLLLLLLLGGGGGGGGGCCJJJJJDJPWWWWWWWWWHHHHHHHHUUUUUZZZZUUUURRRRRRRRRRRRRYYYYYYYYYSSSSSSSKKKKKPPPPPLLLLLLLL',
    'DVVVVVDDOOOOOOOOOOOOOOOFZFFNNNNNNNNNLLLLLLLLLGGGGGGGGGGJJJJJJJPWWWWWWWWHHHHHHHHHUUUUUUUZUUUHCHHRRRRRRRRDDDXYYYYYSYSSSSSSSSKKKKPPPPPPPLLLLLLL',
    'DVVVVVDOOOOOOOOOOOOOOONFNFFNNNNNNNNLLLLLLLLLGGGGGGGGGGGJJJJJJJJWWWWWWWWWWHHHHHHHHHHUUUZZUUUHHHHHHHRRDDDDDDDDYYYYSSSSSSSSSPPPPKPPPPPPPPPPLBLU',
    'DVVVVVVVVVVOOOOVOOOOOONNNNFNNNNNNNNLLLLLLLLGGGGGGGGGGGGJJJJJJJJWWWWWWWWWWHHHHHHHHHUUUUUZUUUUHHHHHHRHDDDDDDDDYYYYYSSSSSSSSPPPPPPPPPPPPPPFPLLL',
    'DVDVVVVVVVVOOOOVOOOOOVNNNNFNNNNNNNLLLLLLLLLGGGGGGGGGJJJJJJJJJJJJWWWWWWWWHHHHHHHHHHHUUUZZUUUUUUHHHHHHNNDDDDDDYYOYSSSSSSSSSPPPPPPPPPPPPPPPPXLL',
    'DDDVVVDVVVVVVOVVOOOOOVNNNNNNNNNNNNNLLLLLLLLLLLGGGGGJJJJJJJJJJJJJWWWWWWWHHHHHHHHHHHHUUUZUUUUUUUSSHAAANNDDDDDDDDSSSSSSSSSPPPPPPPPPPPPPPPPPPXXX',
    'DDVVVDDDVVVVVVVVVVOOOVNNNNNNNNNNNNNLLLLLLLLLLLLGGJJJJJJJJJJJJJJJJWWWWWWHHHHHHHHHHHHHUUUUUUUAAUAAAAAANNNDDDDDDDDSSSSSSSSPPPPPPPPPPPPPPPPPPXXX',
    'DDVVVDDVVVVVVVVVVVVOOVNNNNNNNNNNNNLLLLLLLLLLLLLGLLUJJJJJJJJJJJOJJWWLWLWHHHHHHHHHHHHHUUUUUAAAAAAAAAAANNNDDDDDDSSSSSSSSSSSSPPPPPPPPPPPPPPXPPXX',
    'DDDVVDDDDVVVVVVVVVVVOVVNNNNNNNNNNNLLLLLLLLLLLLLLLUUJAJAJJJJJJJJLLLLLLLWYYHHHHHHHHHHUUUUUUAAAAAAAAAAANNNDDDDDDDSSSSSSSSSSPPPPPPPPPPPPPPPXXXXX',
    'DDDDDDDVVVVVVVVVVVVVVVVNNHNNNNNNLLLLLLLLLLLLLLLLLLUJAAAAJJHJJJLLLLLLLLWWYHHHHHHHHHHUUUUUUUAAAAAAAAAANNDDDDDDDDDSSSSSSTTSPPPPPPPPPPPPPPPXXXXX',
]

class Garden {
    plot: strArr;
    plotHeight: number;
    plotWidth: number;
    regions: Array<region> = [];
    totalPrice: number;

    constructor(input: strArr) {
        this.plot = input;
        this.plotHeight = this.plot.length;
        this.plotWidth = this.plot[0].length;
        this.#dividePlot();
        this.totalPrice = this.regions.reduce((acc, curr) => acc + curr.price, 0)
    }

    #dividePlot () {
        for (let row = 0; row < this.plotHeight; row ++) {
            for (let column = 0; column < this.plotWidth; column ++) {
                const currentChar = this.plot[row][column];
                const isMapped = this.regions.some(ele => {
                    return ele.character === currentChar && ele.coordinates.has(JSON.stringify({x: column, y: row}))
                });
                if (isMapped) {continue}
                const newRegion = this.getRegion({x: column, y: row}, currentChar);
                this.regions.push(newRegion);
            }
        }
    }

    getRegion(currCoord: coordinate, currChar: string): region {
        let perimeter = 0;
        let unmapped = [currCoord];
        const currRegion: Set<string> = new Set();
        while (unmapped.length > 0) {
            const lastCoord = unmapped.pop();
            if (lastCoord === undefined || currRegion.has(JSON.stringify(lastCoord))) { continue }
            currRegion.add(JSON.stringify(lastCoord));
            const surrounding = this.getMatchingSurrounding(lastCoord, currChar);
            perimeter += 4 - surrounding.length;
            unmapped = unmapped.concat(
                surrounding.filter(ele => !currRegion.has(JSON.stringify(ele.coordinate)))
                .map(ele => ele.coordinate)
            );
        }
        return {character: currChar, coordinates: currRegion, perimeter, price: perimeter * currRegion.size}
    }

    getMatchingSurrounding(coordinate: coordinate, character: string): Array<spot> {
        const {x, y} = coordinate;
        const above = y > 0 ? {character: this.plot[y - 1][x], coordinate: {x, y: y - 1}} : null;
        const right = x < this.plotWidth - 1 ? {character: this.plot[y][x + 1], coordinate: {x: x + 1, y}} : null;
        const below = y < this.plotHeight - 1 ? {character: this.plot[y + 1][x], coordinate: {x, y: y + 1}} : null;
        const left = x > 0 ? {character: this.plot[y][x - 1], coordinate: {x: x - 1, y}} : null;
        return [above, right, below, left].filter(ele => ele !== null).filter(ele => ele?.character === character)
    }
}


Deno.test('testData', async (t) => {
    const garden = new Garden(testData);
    await t.step('gets matching surrounding', () => {
        assertEquals(garden.getMatchingSurrounding({x: 2, y: 1}, 'O'),[
            { character: "O", coordinate: { x: 2, y: 0 } },
            { character: "O", coordinate: { x: 2, y: 2 } }
        ])
        assertEquals(garden.getMatchingSurrounding({x: 1, y: 1}, 'X'),[])
        // assertEquals(garden.getMatchingSurrounding({x: 4, y: 1}, 'O'),[])
        // assertEquals(garden.getMatchingSurrounding({x: 4, y: 2}, 'O'),[])
    })

    await t.step('gets contiguous region', () => {
        const oRegion = garden.getRegion({x: 2, y: 1}, 'O')
        assertEquals(oRegion.perimeter, 36)
        assertEquals(oRegion.price, 756)
        const xRegion = garden.getRegion({x: 1, y: 1}, 'X')
        assertEquals(xRegion.perimeter, 4)
        assertEquals(xRegion.price, 4)
    })

    await t.step('gets all regions', () => {
        const garden0 = garden.regions[0]
        assertEquals(garden0.perimeter, 36)
        assertEquals(garden0.price, 756)
        assertEquals(garden0.character, 'O')
        const garden2 = garden.regions[2]
        assertEquals(garden2.perimeter, 4)
        assertEquals(garden2.price, 4)
        assertEquals(garden2.character, 'X')
        const garden4 = garden.regions[4]
        assertEquals(garden4.perimeter, 4)
        assertEquals(garden4.price, 4)
        assertEquals(garden4.character, 'X')
    })

    await t.step('gets total price', () => {
        assertEquals(garden.totalPrice, 772)
    })
})

Deno.test('fullData', () => {
    const garden = new Garden(fullData);
    assertEquals(garden.totalPrice, 1450816)
})